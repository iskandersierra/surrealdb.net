namespace SurrealDB.Client.FSharp.Rest

open System.Net.Http
open System.Text.Json
open System.Text.Json.Nodes
open System.Threading
open System.Threading.Tasks

/// <summary>
/// Represents a REST client for the SurrealDB JSON API.
/// </summary>
type ISurrealRestJsonClient =
    /// <summary>
    /// Creates a new record in the specified table.
    /// </summary>
    /// <param name="table">The table to create the record in.</param>
    /// <param name="record">The record to create.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    /// <remarks>
    /// The id of the record will be generated by the server.
    /// </remarks>
    abstract CreateAsync :
        table: string * record: JsonNode * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Creates a new record in the specified table.
    /// </summary>
    /// <param name="table">The table to create the record in.</param>
    /// <param name="id">The id of the record to create.</param>
    /// <param name="record">The record to create.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    /// <remarks>
    /// If the id is already in use, the operation fails.
    /// </remarks>
    abstract CreateAsync :
        table: string * id: string * record: JsonNode * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Deletes all records in the specified table.
    /// </summary>
    /// <param name="table">The table to delete all records from.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract DeleteAllAsync : table: string * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Deletes the specified record.
    /// </summary>
    /// <param name="table">The table to delete the record from.</param>
    /// <param name="id">The id of the record to delete.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract DeleteAsync : table: string * id: string * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Gets all records in the specified table.
    /// </summary>
    /// <param name="table">The table to get all records from.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract GetAllAsync : table: string * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Gets the specified record.
    /// </summary>
    /// <param name="table">The table to get the record from.</param>
    /// <param name="id">The id of the record to get.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract GetAsync : table: string * id: string * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Inserts or updates the specified record.
    /// </summary>
    /// <param name="table">The table to insert or update the record in.</param>
    /// <param name="id">The id of the record to insert or update.</param>
    /// <param name="record">The record to insert or update.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract InsertOrUpdateAsync :
        table: string * id: string * record: JsonNode * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Patches the specified record.
    /// </summary>
    /// <param name="table">The table to patch the record in.</param>
    /// <param name="id">The id of the record to patch.</param>
    /// <param name="record">The record to patch.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract PatchAsync :
        table: string * id: string * record: JsonNode * cancellationToken: CancellationToken -> Task<RestApiResult>

    /// <summary>
    /// Executes the specified SQL query.
    /// </summary>
    /// <param name="query">The SQL query to execute.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the operation.</returns>
    abstract SqlAsync : query: string * cancellationToken: CancellationToken -> Task<RestApiResult>

type internal SurrealRestJsonClient(httpClient: HttpClient, jsonOptions: JsonSerializerOptions) =
    interface ISurrealRestJsonClient with
        member this.CreateAsync(table, record, cancellationToken) =
            Endpoints.postKeyTable jsonOptions httpClient cancellationToken table record

        member this.CreateAsync(table, id, record, cancellationToken) =
            Endpoints.postKeyTableId jsonOptions httpClient cancellationToken table id record

        member this.DeleteAllAsync(table, cancellationToken) =
            Endpoints.deleteKeyTable jsonOptions httpClient cancellationToken table

        member this.DeleteAsync(table, id, cancellationToken) =
            Endpoints.deleteKeyTableId jsonOptions httpClient cancellationToken table id

        member this.GetAllAsync(table, cancellationToken) =
            Endpoints.getKeyTable jsonOptions httpClient cancellationToken table

        member this.GetAsync(table, id, cancellationToken) =
            Endpoints.getKeyTableId jsonOptions httpClient cancellationToken table id

        member this.InsertOrUpdateAsync(table, id, record, cancellationToken) =
            Endpoints.putKeyTableId jsonOptions httpClient cancellationToken table id record

        member this.PatchAsync(table, id, record, cancellationToken) =
            Endpoints.patchKeyTableId jsonOptions httpClient cancellationToken table id record

        member this.SqlAsync(query, cancellationToken) =
            Endpoints.postSql jsonOptions httpClient cancellationToken query
